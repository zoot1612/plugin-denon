module ("createJSON", package.seeall);
------------------------------------------------------------------------------------------
function file_exists(name)

	local remote_path = '/etc/cmh-ludl/'
	local f=io.open(remote_path .. name,"r")
	if f~=nil then io.close(f) return true else return false end

end
------------------------------------------------------------------------------------------
function file_exists(name)

   local f=io.open(name,"r")
   if f~=nil then io.close(f) return true else return false end

end
------------------------------------------------------------------------------------------
function create_static_json(input_table, avr_dev, ui7Check)

	local remote_path = '/etc/cmh-ludl/'
	local file_name = luup.attr_get('model', avr_dev) or 'DenonReceiver'
	local template_file = 'D_DenonReceiver1.xml'
	local remote_file_json = 'D_' .. file_name .. '1.json'
	local remote_file_xml = 'D_' .. file_name .. '1.xml'
	local remote_service_file = 'S_RenderingControl1.xml'
	local remote_file_location = 'http://code.mios.com/trac/mios_commonupnpavpluginfiles/browser/S_RenderingControl1.xml?format=txt'

	if (file_exists(remote_path .. remote_file_json .. '.lzo')== true) then
		debug('Static json file ' .. remote_path .. remote_file_json .. ' exists, decompress.')
		os.execute( 'pluto-lzo d '..remote_path .. remote_file_json .. '.lzo' .. ' ' .. remote_path .. remote_file_json)
	elseif (file_exists(remote_path .. remote_file_json)== true) then
		debug('Static json file ' .. remote_path .. remote_file_json .. ' exists, already un-compressed.')
	else
		debug('Static json file ' .. remote_path .. remote_file_json .. ' does not exist.')
	end

	debug("Creating/Opening static json file " .. remote_path .. remote_file_json .. ".")
	local outf = io.open( remote_path .. remote_file_json, 'w')

	local row_start = 10
	local column_start = 300
	local button_width = 70
	local button_height = 20
	local column_spacing = 10
	local row_spacing = 10
	local number_columns = 4
------

  if ui7Check == "true" then

    debug("Using UI-7 static json file template")

	  button_height = 25
    row_start = 0
    
	  outf:write( '{\n' )
	  outf:write( '	"default_icon": "https://raw.githubusercontent.com/zoot1612/plugin-denon/master/av_receiver_default.png",\n' )
	  outf:write( '    "state_icons": [\n' )
	  outf:write( '        {\n' )
	  outf:write( '            "img": "https://raw.githubusercontent.com/zoot1612/plugin-denon/master/av_receiver_standby.png",\n' )
	  outf:write( '            "conditions": [\n' )
	  outf:write( '                {\n' )
	  outf:write( '                    "service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
	  outf:write( '                    "variable": "Status",\n' )
	  outf:write( '                    "operator": "==",\n' )
	  outf:write( '                    "value": 0,\n' )
	  outf:write( '                    "subcategory_num": 0\n' )
	  outf:write( '                }\n' )
	  outf:write( '            ]\n' )
	  outf:write( '        },\n' )
	  outf:write( '        {\n' )
	  outf:write( '            "img": "https://raw.githubusercontent.com/zoot1612/plugin-denon/master/av_receiver_on.png",\n' )
	  outf:write( '            "conditions": [\n' )
	  outf:write( '                {\n' )
	  outf:write( '                    "service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
	  outf:write( '                    "variable": "Status",\n' )
	  outf:write( '                    "operator": "==",\n' )
	  outf:write( '                    "value": 1,\n' )
	  outf:write( '                    "subcategory_num": 0\n' )
	  outf:write( '                }\n' )
	  outf:write( '            ]\n' )
	  outf:write( '        }\n' )
	  outf:write( '    ],\n' )
	  outf:write( '	"x": "4",\n' )
	  outf:write( '	"y": "4",\n' )
		outf:write( '	"inScene": "1",\n' )
		outf:write( '	"ToggleButton": 1,\n' )
		outf:write( '	"Tabs": [\n' )
		outf:write( '		{\n' )
		outf:write( '			"Label": {\n' )
		outf:write( '				"lang_tag": "ui7_tabname_control",\n' )
		outf:write( '				"text": "Volume/Inputs",\n' )
		outf:write( '				"TopNavigationTab": "1"\n' )
		outf:write( '			},\n' )
		outf:write( '			"Position": "0",\n' )
		outf:write( '			"TabType": "flash",\n' )
		outf:write( '			"top_navigation_tab": 1,\n' )
		
		outf:write( '			"ControlGroup": [\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"id": "1",\n' )
		outf:write( '					"scenegroup": "1"\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"id": "2",\n' )
		outf:write( '					"scenegroup": "2"\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"id": "3",\n' )
		outf:write( '					"scenegroup": "3"\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"id": "4",\n' )
		outf:write( '					"scenegroup": "4"\n' )
		outf:write( '				}\n' )
		
		outf:write( '			],\n' )
		outf:write( '			"SceneGroup": [\n' )
		outf:write( '				{\n' )
		outf:write( '					"id": "1",\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "0",\n' )
	  outf:write( '					"x": "1",\n' )
	  outf:write( '					"y": "2"\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"id": "2",\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "0.75",\n' )
	  outf:write( '					"x": "1",\n' )
	  outf:write( '					"y": "2"\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"id": "3",\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "2",\n' )
	  outf:write( '					"x": "1",\n' )
	  outf:write( '					"y": "2"\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"id": "4",\n' )
		outf:write( '					"top": "1",\n' )
		outf:write( '					"left": "1",\n' )
	  outf:write( '					"x": "1",\n' )
	  outf:write( '					"y": "0.5"\n' )
		outf:write( '				}\n' )
		outf:write( '			],\n' )

		outf:write( '				"Control": [\n' )
		outf:write( '				{\n' )
		outf:write( '					"ControlGroup": "1",\n' )
		outf:write( '					"ControlType": "multi_state_button",\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "0",\n' )
		outf:write( '					"states":[\n' )
		outf:write( '						{\n' )
		outf:write( '							"Label": {\n' )
		outf:write( '								"lang_tag": "ui7_cmd_zone_on",\n' )
		outf:write( '								"text": "Zone On"\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlGroup": "1",\n' )
		outf:write( '							"Display": {\n' )
		outf:write( '								"Service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
		outf:write( '								"Variable": "Status",\n' )
		outf:write( '								"Value": "1"\n' )
		outf:write( '							},\n' )
		
		outf:write( '							"Command": {\n' )
		outf:write( '								"Service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
		outf:write( '								"Action": "SetTarget",\n' )
		outf:write( '								"Parameters": [\n' )
		outf:write( '									{\n' )
		outf:write( '										"Name": "newTargetValue",\n' )
		outf:write( '										"Value": "1"\n' )
		outf:write( '									}\n' )
		outf:write( '								]\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlCode": "avr_power_on"\n' )
		outf:write( '						},\n' )
		outf:write( '						{\n' )
		outf:write( '							"Label": {\n' )
		outf:write( '								"lang_tag": "ui7_cmd_zone_off",\n' )
		outf:write( '								"text": "Zone Off"\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlGroup": "1",\n' )
		outf:write( '							"Display": {\n' )
		outf:write( '								"Service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
		outf:write( '								"Variable": "Status",\n' )
		outf:write( '								"Value": "0"\n' )
		outf:write( '							},\n' )
		
		outf:write( '							"Command": {\n' )
		outf:write( '								"Service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
		outf:write( '								"Action": "SetTarget",\n' )
		outf:write( '								"Parameters": [\n' )
		outf:write( '									{\n' )
		outf:write( '										"Name": "newTargetValue",\n' )
		outf:write( '										"Value": "0"\n' )
		outf:write( '									}\n' )
		outf:write( '								]\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlCode": "avr_power_off"\n' )
		outf:write( '						}\n' )
		outf:write( '					],\n' )
		outf:write( '					"Display": {\n' )
		outf:write( '					"Top": 0,\n' )
		outf:write( '					"Left": 0\n' )
		outf:write( '					}\n' )
		outf:write( '				},\n' )
	
		outf:write( '				{\n' )
		outf:write( '					"ControlGroup": "2",\n' )
		outf:write( '					"ControlType": "multi_state_button",\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "0",\n' )
		outf:write( '					"states":[\n' )
		outf:write( '						{\n' )
		outf:write( '							"Label": {\n' )
		outf:write( '								"lang_tag": "ui7_cmd_zone_on",\n' )
		outf:write( '								"text": "Main On"\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlGroup": "2",\n' )
		outf:write( '							"Display": {\n' )
		outf:write( '								"Service": "urn:denon-com:serviceId:Receiver1",\n' )
		outf:write( '								"Variable": "PowerStatus",\n' )
		outf:write( '								"Value": "1"\n' )
		outf:write( '							},\n' )
		
		outf:write( '							"Command": {\n' )
		outf:write( '								"Service": "urn:micasaverde-com:serviceId:DiscretePower1",\n' )
		outf:write( '								"Action": "On",\n' )
		outf:write( '								"Parameters": [\n' )
		outf:write( '									{\n' )
		outf:write( '										"Name": "On",\n' )
		outf:write( '										"Value": "1"\n' )
		outf:write( '									}\n' )
		outf:write( '								]\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlCode": "avr_discrete_power_on"\n' )
		outf:write( '						},\n' )
		outf:write( '						{\n' )
		outf:write( '							"Label": {\n' )
		outf:write( '								"lang_tag": "ui7_cmd_zone_off",\n' )
		outf:write( '								"text": "Standby"\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlGroup": "2",\n' )
		outf:write( '							"Display": {\n' )
		outf:write( '								"Service": "urn:denon-com:serviceId:Receiver1",\n' )
		outf:write( '								"Variable": "PowerStatus",\n' )
		outf:write( '								"Value": "0"\n' )
		outf:write( '							},\n' )
		
		outf:write( '							"Command": {\n' )
		outf:write( '								"Service": "urn:micasaverde-com:serviceId:DiscretePower1",\n' )
		outf:write( '								"Action": "Off",\n' )
		outf:write( '								"Parameters": [\n' )
		outf:write( '									{\n' )
		outf:write( '										"Name": "Off",\n' )
		outf:write( '										"Value": "0"\n' )
		outf:write( '									}\n' )
		outf:write( '								]\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlCode": "avr_discrete_power_off"\n' )
		outf:write( '						}\n' )
		outf:write( '					],\n' )
		outf:write( '					"Display": {\n' )
		outf:write( '					"Top": 0,\n' )
		outf:write( '					"Left": 70\n' )
		outf:write( '					}\n' )
		outf:write( '				},\n' )

		outf:write( '				{\n' )
		outf:write( '					"ControlGroup": "3",\n' )
		outf:write( '					"ControlType": "multi_state_button",\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "0",\n' )
		outf:write( '					"states":[\n' )
		outf:write( '						{\n' )
		outf:write( '							"Label": {\n' )
		outf:write( '								"lang_tag": "ui7_cmd_mute_on",\n' )
		outf:write( '								"text": "Mute On"\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlGroup": "3",\n' )
		outf:write( '							"Display": {\n' )
		outf:write( '								"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
		outf:write( '								"Variable": "Mute",\n' )
		outf:write( '								"Value": "1"\n' )
		outf:write( '							},\n' )
		
		outf:write( '							"Command": {\n' )
		outf:write( '								"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
		outf:write( '								"Action": "SetMute",\n' )
		outf:write( '								"Parameters": [\n' )
		outf:write( '									{\n' )
		outf:write( '										"Name": "DesiredMute",\n' )
		outf:write( '										"Value": "1"\n' )
		outf:write( '									}\n' )
		outf:write( '								]\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlCode": "avr_mute_on"\n' )
		outf:write( '						},\n' )
		outf:write( '						{\n' )
		outf:write( '							"Label": {\n' )
		outf:write( '								"lang_tag": "ui7_cmd_mute_off",\n' )
		outf:write( '								"text": "Mute Off"\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlGroup": "3",\n' )
		outf:write( '							"Display": {\n' )
		outf:write( '								"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
		outf:write( '								"Variable": "Mute",\n' )
		outf:write( '								"Value": "0"\n' )
		outf:write( '							},\n' )
		outf:write( '							"Command": {\n' )
		outf:write( '								"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
		outf:write( '								"Action": "SetMute",\n' )
		outf:write( '								"Parameters": [\n' )
		outf:write( '									{\n' )
		outf:write( '										"Name": "DesiredMute",\n' )
		outf:write( '										"Value": "0"\n' )
		outf:write( '									}\n' )
		outf:write( '								]\n' )
		outf:write( '							},\n' )
		outf:write( '							"ControlCode": "avr_mute_off"\n' )
		outf:write( '						}\n' )
		outf:write( '					],\n' )
		outf:write( '					"Display": {\n' )
		outf:write( '					"Top": 0,\n' )
		outf:write( '					"Left": 160\n' )
		outf:write( '					}\n' )
		outf:write( '				},\n' )

		outf:write( '					{\n' )
		outf:write( '					"ControlGroup": "4",\n' )
		outf:write( '					"ControlType": "slider",\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "0",\n' )
		outf:write( '					"ControlPair": "1",\n' )
		outf:write( '					"Style": "numeric",\n' )
		outf:write( '					"LabelMin": {\n' )
		outf:write( '						"lang_tag": "ui7_label_min",\n' )
		outf:write( '						"text": "Min"\n' )
		outf:write( '					},\n' )
		outf:write( '					"LabelMax": {\n' )
		outf:write( '						"lang_tag": "ui7_label_max",\n' )
		outf:write( '						"text": "Max"\n' )
		outf:write( '					},\n' )
		outf:write( '					"LabelSymbol": {\n' )
		outf:write( '						"lang_tag": "ui7_volume_label_symbol",\n' )
		outf:write( '						"text": "%"\n' )
		outf:write( '					},\n' )
		outf:write( '					"ShowButtons": "1",\n' )
		outf:write( '					"Display": {\n' )
		outf:write( '						"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
		outf:write( '						"Variable": "Volume",\n' )
		outf:write( '						"MinValue": "0",\n' )
		outf:write( '						"MaxValue": "98",\n' )
		outf:write( '						"Top": 70,\n' )
		outf:write( '						"Left": 45,\n' )
		outf:write( '						"Width": 145,\n' )
		outf:write( '						"Height": 20,\n' )
		outf:write( '						"ID": "Desired_Volume"\n' )
		outf:write( '					},\n' )
		outf:write( '					"Command": {\n' )
		outf:write( '						"HumanFriendlyText": {\n' )
		outf:write( '								"lang_tag": "ui7_cmd_set_volume",\n' )
		outf:write( '								"text": "Set volume"\n' )
		outf:write( '						},\n' )
		outf:write( '						"Sufix": "%",\n' )
		outf:write( '						"Description": {\n' )
		outf:write( '							"lang_tag": "ui7_cmd_set_volume",\n' )
		outf:write( '							"text": "Enter a value between 0 and 98"\n' )
		outf:write( '						},\n' )
		outf:write( '						"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
		outf:write( '						"Action": "SetVolume",\n' )
		outf:write( '						"Parameters": [\n' )
		outf:write( '							{\n' )
		outf:write( '								"Name": "DesiredVolume",\n' )
		outf:write( '								"ID": "Desired_Volume"\n' )
		outf:write( '							}\n' )
		outf:write( '						]\n' )
		outf:write( '					},\n' )
		outf:write( '					"ControlCode": "desired_volume_ui7"\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
	  outf:write( '					"ControlType": "button",\n' )
	  outf:write( '					"Label": {\n' )
	  outf:write( '						"lang_tag": "volume_down",\n' )
	  outf:write( '						"text": "-"\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Top": 70,\n' )
	  outf:write( '						"Left": 10,\n' )
	  outf:write( '						"Width": 25,\n' )
	  outf:write( '						"Height": 25\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Command": {\n' )
	  outf:write( '						"Service": "urn:micasaverde-com:serviceId:Volume1",\n' )
	  outf:write( '						"Action": "Down",\n' )
	  outf:write( '						"Parameters": []\n' )
	  outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
	  outf:write( '					"ControlType": "button",\n' )
	  outf:write( '					"Label": {\n' )
	  outf:write( '						"lang_tag": "volume_up",\n' )
	  outf:write( '						"text": "+"\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Top": 70,\n' )
	  outf:write( '						"Left": 200,\n' )
	  outf:write( '						"Width": 25,\n' )
	  outf:write( '						"Height": 25\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Command": {\n' )
	  outf:write( '						"Service": "urn:micasaverde-com:serviceId:Volume1",\n' )
	  outf:write( '						"Action": "Up",\n' )
	  outf:write( '						"Parameters": []\n' )
	  outf:write( '					}\n' )
	  outf:write( '				},\n' )

  else
    debug("Using UI-5 static json file template")

		outf:write( '		{\n' )
		outf:write( '			"flashicon": "icons\/music_audio.png",\n' )
  	outf:write( '			"iconText": "1",\n' )
		outf:write( '			"imgIconBody": "",\n' )
		outf:write( '			"imgIconDimmable": "",\n' )
		outf:write( '			"imgIconTurnable": "",\n' )
		outf:write( '			"imgIconMin": "",\n' )
		outf:write( '			"imgIconMax": "",\n' )
		outf:write( '			"halloIconsDir": "pics/hallo",\n' )
		outf:write( '			"x": "4",\n' )
		outf:write( '			"y": "4",\n' )
		outf:write( '			"inScene": "1",\n' )
		outf:write( '			"DisplayStatus": {\n' )
		outf:write( '				"Style": "numeric",\n' )
  	outf:write( '				"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
		outf:write( '				"Variable": "Volume",\n' )
		outf:write( '				"MinValue": "0",\n' )
		outf:write( '				"MaxValue": "98"\n' )
		outf:write( '			},\n' )
		outf:write( '			"doc_url": {\n' )
		outf:write( '				"doc_language": 1,\n' )
		outf:write( '				"doc_manual": 1,\n' )
		outf:write( '				"doc_version": 1,\n' )
		outf:write( '				"doc_platform": 0,\n' )
		outf:write( '				"doc_page": "devices"\n' )
		outf:write( '			},\n' )
		outf:write( '			"ToggleButton": 1,\n' )
		outf:write( '			"Tabs": [{\n' )
		outf:write( '				"Label": {\n' )
		outf:write( '					"lang_tag": "tabname_control",\n' )
		outf:write( '					"text": "Volume/Inputs"\n' )
		outf:write( '				},\n' )
		outf:write( '				"Position": "0",\n' )
		outf:write( '				"TabType": "flash",\n' )

		outf:write( '				"SceneGroup": [\n' )
		outf:write( '					{\n' )
		outf:write( '						"id": "1",\n' )
		outf:write( '						"top": "0.5",\n' )
		outf:write( '						"left": "1"\n' )
		outf:write( '					}, {\n' )
		outf:write( '						"id": "2",\n' )
		outf:write( '						"top": "0.5",\n' )
		outf:write( '						"left": "0"\n' )
		outf:write( '					}, {\n' )
		outf:write( '						"id": "3",\n' )
		outf:write( '						"top": "1.5",\n' )
		outf:write( '						"left": "2"\n' )
		outf:write( '					}, {\n' )
		outf:write( '						"id": "4",\n' )
		outf:write( '						"top": "0.5",\n' )
		outf:write( '						"left": "2"\n' )
		outf:write( '					}\n' )

		outf:write( '				],\n' )
		outf:write( '				"ControlGroup": [{\n' )
		outf:write( '					"id": "1",\n' )
		outf:write( '					"isSingle": "1",\n' )
		outf:write( '					"scenegroup": "1"\n' )
		outf:write( '				}, {\n' )
		outf:write( '					"id": "2",\n' )
		outf:write( '					"isSingle": "1",\n' )
		outf:write( '					"scenegroup": "1"\n' )
		outf:write( '				}, {\n' )
		outf:write( '					"id": "3",\n' )
		outf:write( '					"isSingle": "1",\n' )
		outf:write( '					"scenegroup": "2"\n' )
		outf:write( '				}, {\n' )
		outf:write( '					"id": "4",\n' )
		outf:write( '					"isSingle": "1",\n' )
		outf:write( '					"scenegroup": "2"\n' )
		outf:write( '				}, {\n' )
		outf:write( '					"id": "5",\n' )
		outf:write( '					"isSingle": "1",\n' )
		outf:write( '					"scenegroup": "3"\n' )
		outf:write( '				}, {\n' )
		outf:write( '					"id": "6",\n' )
		outf:write( '					"isSingle": "1",\n' )
		outf:write( '					"scenegroup": "4"\n' )
		outf:write( '				}],\n' )

		outf:write( '				"Control": [{\n' )
		outf:write( '					"ControlGroup": "1",\n' )
		outf:write( '					"ControlType": "button",\n' )
		outf:write( '					"Label": {\n' )
		outf:write( '						"lang_tag": "cmd_off",\n' )
		outf:write( '						"text": "Zone Off"\n' )
		outf:write( '					},\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "0",\n' )
		outf:write( '					"Display": {\n' )
		outf:write( '						"Service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
		outf:write( '						"Variable": "Status",\n' )
		outf:write( '						"Value": "0",\n' )
		outf:write( '						"Top": 40,\n' )
		outf:write( '						"Left": 10,\n' )
		outf:write( '						"Width": 70,\n' )
		outf:write( '						"Height": 20\n' )
		outf:write( '					},\n' )
		outf:write( '					"Command": {\n' )
		outf:write( '						"Service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
		outf:write( '						"Action": "SetTarget",\n' )
		outf:write( '						"Parameters": [{\n' )
		outf:write( '							"Name": "newTargetValue",\n' )
		outf:write( '							"Value": "0"\n' )
		outf:write( '						}]\n' )
		outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"ControlGroup": "2",\n' )
		outf:write( '					"ControlType": "button",\n' )
		outf:write( '					"Label": {\n' )
		outf:write( '						"lang_tag": "cmd_on",\n' )
		outf:write( '						"text": "Zone On"\n' )
		outf:write( '					},\n' )
		outf:write( '					"top": "1",\n' )
		outf:write( '					"left": "0",\n' )
		outf:write( '					"Display": {\n' )
		outf:write( '						"Service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
		outf:write( '						"Variable": "Status",\n' )
		outf:write( '						"Value": "1",\n' )
		outf:write( '						"Top": 40,\n' )
		outf:write( '						"Left": 100,\n' )
		outf:write( '						"Width": 70,\n' )
		outf:write( '						"Height": 20\n' )
		outf:write( '					},\n' )
		outf:write( '					"Command": {\n' )
		outf:write( '						"Service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
		outf:write( '						"Action": "SetTarget",\n' )
		outf:write( '						"Parameters": [{\n' )
		outf:write( '							"Name": "newTargetValue",\n' )
		outf:write( '							"Value": "1"\n' )
		outf:write( '						}]\n' )
		outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"ControlGroup": "3",\n' )
		outf:write( '					"ControlType": "button",\n' )
		outf:write( '					"Label": {\n' )
		outf:write( '						"lang_tag": "cmd_off",\n' )
		outf:write( '						"text": "Standby"\n' )
		outf:write( '					},\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "0",\n' )
		outf:write( '					"Display": {\n' )
		outf:write( '						"Service": "urn:denon-com:serviceId:Receiver1",\n' )
		outf:write( '						"Variable": "PowerStatus",\n' )
		outf:write( '						"Value": "0",\n' )
		outf:write( '						"Top": 10,\n' )
		outf:write( '						"Left": 10,\n' )
		outf:write( '						"Width": 70,\n' )
		outf:write( '						"Height": 20\n' )
		outf:write( '					},\n' )
		outf:write( '					"Command": {\n' )
		outf:write( '						"Service": "urn:micasaverde-com:serviceId:DiscretePower1",\n' )
		outf:write( '						"Action": "Off",\n' )
		outf:write( '						"Parameters": [{\n' )
		outf:write( '							"Name": "Off",\n' )
		outf:write( '							"Value": "0"\n' )
		outf:write( '						}]\n' )
		outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"ControlGroup": "4",\n' )
		outf:write( '					"ControlType": "button",\n' )
		outf:write( '					"Label": {\n' )
		outf:write( '						"lang_tag": "cmd_on",\n' )
		outf:write( '						"text": "Main On"\n' )
		outf:write( '					},\n' )
		outf:write( '					"top": "1",\n' )
		outf:write( '					"left": "0",\n' )
		outf:write( '					"Display": {\n' )
		outf:write( '						"Service": "urn:denon-com:serviceId:Receiver1",\n' )
		outf:write( '						"Variable": "PowerStatus",\n' )
		outf:write( '						"Value": "1",\n' )
		outf:write( '						"Top": 10,\n' )
		outf:write( '						"Left": 100,\n' )
		outf:write( '						"Width": 70,\n' )
		outf:write( '						"Height": 20\n' )
		outf:write( '					},\n' )
		outf:write( '					"Command": {\n' )
		outf:write( '						"Service": "urn:micasaverde-com:serviceId:DiscretePower1",\n' )
		outf:write( '						"Action": "On",\n' )
		outf:write( '						"Parameters": [{\n' )
		outf:write( '							"Name": "On",\n' )
		outf:write( '							"Value": "1"\n' )
		outf:write( '						}]\n' )
		outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"ControlGroup": "5",\n' )
		outf:write( '					"ControlType": "slider",\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "0",\n' )
		outf:write( '					"ControlPair": "1",\n' )
		outf:write( '					"ID": "NewDesiredVolume",\n' )
	--outf:write( '					"ControlHeader": "1",\n' )
		outf:write( '					"Style": "numeric",\n' )
		outf:write( '					"Display": {\n' )
		outf:write( '						"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
		outf:write( '						"Variable": "Volume",\n' )
		outf:write( '						"MinValue": "0",\n' )
		outf:write( '						"MaxValue": "100",\n' )
		outf:write( '						"Top": 70,\n' )
		outf:write( '						"Left": 10,\n' )
		outf:write( '						"Width": 200,\n' )
		outf:write( '						"Height": 20\n' )
		outf:write( '					},\n' )
		outf:write( '					"Command": {\n' )
		outf:write( '						"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
		outf:write( '						"Action": "SetVolume",\n' )
		outf:write( '						"Parameters": [{\n' )
		outf:write( '							"Name": "DesiredVolume",\n' )
		outf:write( '							"ID": "NewDesiredVolume"\n' )
		outf:write( '						}]\n' )
		outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"ControlGroup": "6",\n' )
		outf:write( '					"ControlType": "button",\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "1",\n' )
		outf:write( '					"Label": {\n' )
		outf:write( '						"lang_tag": "unmute",\n' )
		outf:write( '						"text": "Unmute"\n' )
		outf:write( '					},\n' )
		outf:write( '					"Display": {\n' )
		outf:write( '						"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
		outf:write( '						"Variable": "Mute",\n' )
		outf:write( '						"Value": "0",\n' )
		outf:write( '						"Top": 100,\n' )
		outf:write( '						"Left": 100,\n' )
		outf:write( '						"Width": 70,\n' )
		outf:write( '						"Height": 20\n' )
		outf:write( '					},\n' )
		outf:write( '					"Command": {\n' )
		outf:write( '						"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
		outf:write( '						"Action": "SetMute",\n' )
		outf:write( '						"Parameters": [{\n' )
		outf:write( '							"Name": "DesiredMute",\n' )
		outf:write( '							"Value": "0"\n' )
		outf:write( '						}]\n' )
		outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
		outf:write( '					"ControlGroup": "6",\n' )
		outf:write( '					"ControlType": "button",\n' )
		outf:write( '					"top": "0",\n' )
		outf:write( '					"left": "0",\n' )
		outf:write( '					"Label": {\n' )
		outf:write( '						"lang_tag": "mute",\n' )
		outf:write( '						"text": "mute"\n' )
		outf:write( '					},\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
	  outf:write( '						"Variable": "Mute",\n' )
	  outf:write( '						"Value": "1",\n' )
	  outf:write( '						"Top": 130,\n' )
	  outf:write( '						"Left": 100,\n' )
	  outf:write( '						"Width": 70,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Command": {\n' )
	  outf:write( '						"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
	  outf:write( '						"Action": "SetMute",\n' )
	  outf:write( '						"Parameters": [{\n' )
	  outf:write( '							"Name": "DesiredMute",\n' )
	  outf:write( '							"Value": "1"\n' )
	  outf:write( '						}]\n' )
	  outf:write( '					}\n' )
	  outf:write( '				},\n' )

		outf:write( '				{\n' )
	  outf:write( '					"ControlType": "button",\n' )
	  outf:write( '					"Label": {\n' )
	  outf:write( '						"lang_tag": "volume_down",\n' )
	  outf:write( '						"text": "- Volume"\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Top": 130,\n' )
	  outf:write( '						"Left": 10,\n' )
	  outf:write( '						"Width": 70,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Command": {\n' )
	  outf:write( '						"Service": "urn:micasaverde-com:serviceId:Volume1",\n' )
	  outf:write( '						"Action": "Down",\n' )
	  outf:write( '						"Parameters": []\n' )
	  outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
	  outf:write( '					"ControlType": "button",\n' )
	  outf:write( '					"Label": {\n' )
	  outf:write( '						"lang_tag": "volume_up",\n' )
	  outf:write( '						"text": "+ Volume"\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Top": 100,\n' )
	  outf:write( '						"Left": 10,\n' )
	  outf:write( '						"Width": 70,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Command": {\n' )
	  outf:write( '						"Service": "urn:micasaverde-com:serviceId:Volume1",\n' )
	  outf:write( '						"Action": "Up",\n' )
	  outf:write( '						"Parameters": []\n' )
	  outf:write( '					}\n' )
	  outf:write( '				},\n' )
end

	  outf:write( '				{\n' )
	  outf:write( '					"ControlType": "label",\n' )
	  outf:write( '					"Label": {\n' )
	  outf:write( '						"lang_tag": "lblMsg",\n' )
	  outf:write( '						"text": "Input:",\n' )
	  outf:write( '						"text_align": "left"\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Top": 160,\n' )
	  outf:write( '						"Left": 10,\n' )
	  outf:write( '						"Width": 75,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					}\n' )
	  outf:write( '				}, {\n' )
	  outf:write( '					"ControlType": "variable",\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Service": "urn:denon-com:serviceId:Receiver1",\n' )
	  outf:write( '						"Variable": "Input",\n' )
	  outf:write( '						"Top": 160,\n' )
	  outf:write( '						"Left": 120,\n' )
	  outf:write( '						"Width": 70,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
	  outf:write( '					"ControlType": "label",\n' )
	  outf:write( '					"Label": {\n' )
	  outf:write( '						"lang_tag": "lblMsg",\n' )
	  outf:write( '						"text": "Source:",\n' )
	  outf:write( '						"text_align": "left"\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Top": 180,\n' )
	  outf:write( '						"Left": 10,\n' )
	  outf:write( '						"Width": 75,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					}\n' )
	  outf:write( '				}, {\n' )
	  outf:write( '					"ControlType": "variable",\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Service": "urn:denon-com:serviceId:Receiver1",\n' )
	  outf:write( '						"Variable": "Source",\n' )
	  outf:write( '						"Top": 180,\n' )
	  outf:write( '						"Left": 120,\n' )
	  outf:write( '						"Width": 70,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
	  outf:write( '					"ControlType": "label",\n' )
	  outf:write( '					"Label": {\n' )
	  outf:write( '						"lang_tag": "lblMsg",\n' )
	  outf:write( '						"text": "Surround Mode:",\n' )
	  outf:write( '						"text_align": "left"\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Top": 200,\n' )
	  outf:write( '						"Left": 10,\n' )
	  outf:write( '						"Width": 75,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					}\n' )
	  outf:write( '				}, {\n' )
	  outf:write( '					"ControlType": "variable",\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Service": "urn:denon-com:serviceId:Receiver1",\n' )
	  outf:write( '						"Variable": "Surround",\n' )
	  outf:write( '						"Top": 200,\n' )
	  outf:write( '						"Left": 120,\n' )
	  outf:write( '						"Width": 70,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
	  outf:write( '					"ControlType": "label",\n' )
	  outf:write( '					"Label": {\n' )
	  outf:write( '						"lang_tag": "lblMsg",\n' )
	  outf:write( '						"text": "Video:",\n' )
	  outf:write( '						"text_align": "left"\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Top": 220,\n' )
	  outf:write( '						"Left": 10,\n' )
	  outf:write( '						"Width": 75,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					}\n' )
	  outf:write( '				}, {\n' )
	  outf:write( '					"ControlType": "variable",\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Service": "urn:denon-com:serviceId:Receiver1",\n' )
	  outf:write( '						"Variable": "Video",\n' )
	  outf:write( '						"Top": 220,\n' )
	  outf:write( '						"Left": 120,\n' )
	  outf:write( '						"Width": 100,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
	  outf:write( '					"ControlType": "label",\n' )
	  outf:write( '					"Label": {\n' )
	  outf:write( '						"lang_tag": "lblMsg",\n' )
	  outf:write( '						"text": "Volume:",\n' )
	  outf:write( '						"text_align": "left"\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Top": 240,\n' )
	  outf:write( '						"Left": 10,\n' )
	  outf:write( '						"Width": 75,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					}\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
	  outf:write( '					"ControlType": "variable",\n' )
	  outf:write( '					"Display": {\n' )
	  outf:write( '						"Service": "urn:upnp-org:serviceId:RenderingControl1",\n' )
	  outf:write( '						"Variable": "Volume",\n' )
	  outf:write( '						"Top": 240,\n' )
	  outf:write( '						"Left": 120,\n' )
	  outf:write( '						"Width": 100,\n' )
	  outf:write( '						"Height": 20\n' )
	  outf:write( '					}\n' )
		outf:write( '				},\n' )
		
    outf:write( '				{\n' )
    outf:write( '					"ControlType": "label",\n' )
    outf:write( '					"Label": {\n' )
    outf:write( '						"lang_tag": "command_send_page",\n' )
    outf:write( '						"text": "Command:"\n' )
    outf:write( '					},\n' )
    outf:write( '					"Display": {\n' )
    outf:write( '						"Top": 260,\n' )
    outf:write( '						"Left": 10,\n' )
    outf:write( '						"Width": 75,\n' )
    outf:write( '						"Height": 20\n' )
    outf:write( '					}\n' )
    outf:write( '				},\n' )
    outf:write( '				{\n' )
    outf:write( '					"ControlType": "input",\n' )
    outf:write( '					"ID": "CommandParameters",\n' )
    outf:write( '					"Display": {\n' )
    outf:write( '						"Top": 260,\n' )
    outf:write( '						"Left": 120,\n' )
    outf:write( '						"Width": 200,\n' )
    outf:write( '						"Height": 20\n' )
    outf:write( '					}\n' )
    outf:write( '				},\n' )
    outf:write( '				{\n' )
    outf:write( '					"ControlType": "button",\n' )
    outf:write( '					"Label": {\n' )
    outf:write( '						"lang_tag": "command",\n' )
    outf:write( '						"text": "Send"\n' )
    outf:write( '					},\n' )
    outf:write( '					"Display": {\n' )
    outf:write( '						"Top": 260,\n' )
    outf:write( '						"Left": 340,\n' )
    outf:write( '						"Width": 75,\n' )
    outf:write( '						"Height": 20\n' )
    outf:write( '					},\n' )
    outf:write( '					"Command": {\n' )
    outf:write( '						"Service": "urn:denon-com:serviceId:Receiver1",\n' )
    outf:write( '						"Action": "SendCommand",\n' )
    outf:write( '						"Parameters": [\n' )
    outf:write( '							{\n' )
    outf:write( '								"Name": "Command",\n' )
    outf:write( '								"ID": "CommandParameters"\n' )
    outf:write( '							}\n' )
    outf:write( '						]\n' )
    outf:write( '					}\n' )
    outf:write( '				},\n' )

	len = #input_table

	for k, v in ipairs(input_table) do

		local name = (input_table[k]["name"])
		local source = (input_table[k]["source"])
		local column_num = (k%number_columns == 0) and (number_columns-1) or ((k%number_columns)-1)
		local row_num = (math.ceil(k/number_columns))-1
		local left = (column_num*(button_width+row_spacing))+column_start
		local top = (row_num == 0) and row_start or (row_num*(button_height + column_spacing)) + row_start

		if (source ~= "") then
			outf:write( '		{\n' )
			outf:write( '			"ControlType": "button",\n' )
			outf:write( '			"Label": {\n' )
			outf:write( '				"lang_tag": "Input' .. k .. '",\n' )
			outf:write( '				"text": "' .. name .. '"\n' )
			outf:write( '			},\n' )
			outf:write( '			"Display": {\n' )
			outf:write( '				"Service": "urn:denon-com:serviceId:Receiver1",\n' )
			outf:write( '				"Variable": "Input",\n' )
			outf:write( '				"Value": "' .. source .. '",\n' )
			outf:write( '				"Top": ' .. top .. ',\n' )
			outf:write( '				"Left": ' .. left .. ',\n' )
			outf:write( '				"Width": "' .. button_width .. '",\n' )
			outf:write( '				"Height": "' .. button_height .. '"\n' )
			outf:write( '			},' )
			outf:write( '			"Command": {\n' )
			if (k <= 10) then
				outf:write( '				"Service": "urn:micasaverde-com:serviceId:InputSelection1",\n' )
			else
				outf:write( '				"Service": "urn:denon-com:serviceId:Receiver1",\n' )
			end
			outf:write( '				"Action": "Input' .. k .. '"\n' )
			outf:write( '			}\n' )

			if (k < len) then
				outf:write( '	},\n' )
			else
				outf:write( '	}\n' )
			end

		end
	end

	    outf:write( '				]\n' )
	    outf:write( '			},\n' )


------
--[[
    outf:write( '				{\n' )
	  outf:write( '				"Label": {\n' )
	  outf:write( '					"lang_tag": "tuner",\n' )
	  outf:write( '					"text": "Tuner"\n' )
	  outf:write( '				},\n' )
	  outf:write( '				"Position": "1",\n' )
	  outf:write( '				"TabType": "javascript",\n' )
	  outf:write( '				"ScriptName": "J_AVRReceiver1.js",\n' )
	  outf:write( '				"Function": "tuner"\n' )
	  outf:write( '				},\n' )
------
    outf:write( '				{\n' )
	  outf:write( '				"Label": {\n' )
	  outf:write( '					"lang_tag": "sirius",\n' )
	  outf:write( '					"text": "Sirius"\n' )
	  outf:write( '				},\n' )
	  outf:write( '				"Position": "2",\n' )
	  outf:write( '				"TabType": "javascript",\n' )
	  outf:write( '				"ScriptName": "J_AVRReceiver1.js",\n' )
	  outf:write( '				"Function": "sirius"\n' )
	  outf:write( '				},\n' )
]]--
------

		outf:write( '				{\n' )
	  outf:write( '				"Label": {\n' )
	  outf:write( '					"lang_tag": "advanced",\n' )
	  outf:write( '					"text": "Advanced"\n' )
	  outf:write( '				},\n' )
	  outf:write( '				"Position": "1",\n' )
	  outf:write( '				"TabType": "javascript",\n' )
	  outf:write( '				"ScriptName": "shared.js",\n' )
	  outf:write( '				"Function": "advanced_device"\n' )
		outf:write( '				},\n' )
    
    if ui7Check == "true" then
	  outf:write( '			  {\n' )	
	  outf:write( '				"Label": {\n' )
	  outf:write( '					"lang_tag": "settings",\n' )
	  outf:write( '					"text": "Settings"\n' )
	  outf:write( '				},\n' )
	  outf:write( '				"Position": "2",\n' )
	  outf:write( '				"TabType": "javascript",\n' )
	  outf:write( '				"ScriptName": "J_AVRReceiver1_UI7.js",\n' )
	  outf:write( '				"Function": "avr.configure"\n' )
		outf:write( '				},\n' )
    end

		outf:write( '				{\n' )
	  outf:write( '				"Label": {\n' )
	  outf:write( '					"lang_tag": "device_options",\n' )
	  outf:write( '					"text": "Device Options"\n' )
	  outf:write( '				},\n' )
	  outf:write( '				"Position": "3",\n' )
	  outf:write( '				"TabType": "javascript",\n' )
	  outf:write( '				"ScriptName": "shared.js",\n' )
	  outf:write( '				"Function": "device_zwave_options"\n' )
		outf:write( '				},\n' )

		outf:write( '				{\n' )
	  outf:write( '				"Label": {\n' )
	  outf:write( '					"lang_tag": "logs",\n' )
	  outf:write( '					"text": "Logs"\n' )
	  outf:write( '				},\n' )
	  outf:write( '				"Position": "4",\n' )
	  outf:write( '				"TabType": "javascript",\n' )
	  outf:write( '				"ScriptName": "shared.js",\n' )
	  outf:write( '				"Function": "device_logs"\n' )
		outf:write( '				},\n' )
		
		outf:write( '				{\n' )
	  outf:write( '				"Label": {\n' )
	  outf:write( '					"lang_tag": "notifications",\n' )
	  outf:write( '					"text": "Notifications"\n' )
	  outf:write( '				},\n' )
	  outf:write( '				"Position": "5",\n' )
	  outf:write( '				"TabType": "javascript",\n' )
	  outf:write( '				"ScriptName": "shared.js",\n' )
	  outf:write( '				"Function": "device_notifications"\n' )
	  outf:write( '			}],\n' )
------
	  outf:write( '			"sceneList": {\n' )
	  outf:write( '				"group_1": {\n' )
	  outf:write( '					"cmd_1": {\n' )
	  outf:write( '						"label": "ON",\n' )
	  outf:write( '						"serviceId": "urn:upnp-org:serviceId:SwitchPower1",\n' )
	  outf:write( '						"action": "SetTarget",\n' )
	  outf:write( '						"arguments": {\n' )
	  outf:write( '							"newTargetValue": "1"\n' )
	  outf:write( '						},\n' )
	  outf:write( '						"display": {\n' )
	  outf:write( '							"service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
	  outf:write( '							"variable": "Status",\n' )
	  outf:write( '							"value": "1"\n' )
	  outf:write( '						}\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"cmd_2": {\n' )
	  outf:write( '						"label": "OFF",\n' )
	  outf:write( '						"serviceId": "urn:upnp-org:serviceId:SwitchPower1",\n' )
	  outf:write( '						"action": "SetTarget",\n' )
	  outf:write( '						"arguments": {\n' )
	  outf:write( '							"newTargetValue": "0"\n' )
	  outf:write( '						},\n' )
	  outf:write( '						"display": {\n' )
	  outf:write( '							"service": "urn:upnp-org:serviceId:SwitchPower1",\n' )
	  outf:write( '							"variable": "Status",\n' )
	  outf:write( '							"value": "0"\n' )
	  outf:write( '						}\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"cmd_3": {\n' )
	  outf:write( '					"label": "Set volume",\n' )
	  outf:write( '					"serviceId": "urn:upnp-org:serviceId:RenderingControl1",\n' )
	  outf:write( '					"action": "SetVolume",\n' )
	  outf:write( '					"argumentList": {\n' )
	  outf:write( '						"argument_1": {\n' )
	  outf:write( '						"dataType": "ui1",\n' )
	  outf:write( '						"defaultValue": "",\n' )
	  outf:write( '						"allowedValueRange": {\n' )
	  outf:write( '							"minimum": "0",\n' )
	  outf:write( '							"maximum": "98"\n' )
	  outf:write( '							},\n' )
	  outf:write( '							"prefix": "to",\n' )
	  outf:write( '							"suffix": "",\n' )
	  outf:write( '							"name": "Desired Volume"\n' )
	  outf:write( '						}\n' )
	  outf:write( '					 }\n' )
	  outf:write( '					}\n' )
	  outf:write( '				}\n' )
	  outf:write( '			},\n' )
	  outf:write( '			"eventList2": [\n' )
	  outf:write( '				{\n' )
	  outf:write( '					"id": 1,\n' )
	  outf:write( '					"label": {\n' )
	  outf:write( '						"lang_tag": "device_turned_on_off",\n' )
	  outf:write( '						"text": "A device is turned on or off"\n' )
	  outf:write( '					},\n' )
	  outf:write( '					"serviceId": "urn:upnp-org:serviceId:SwitchPower1",\n' )
	  outf:write( '					"argumentList": [\n' )
	  outf:write( '						{\n' )
	  outf:write( '							"id": 1,\n' )
	  outf:write( '							"dataType": "boolean",\n' )
	  outf:write( '							"defaultValue": "1",\n' )
	  outf:write( '							"allowedValueList": [\n' )
	  outf:write( '								{\n' )
	  outf:write( '									"Off": "0",\n' )
	  outf:write( '									"HumanFriendlyText": {\n' )
	  outf:write( '										"lang_tag": "hft_device_turned_off",\n' )
	  outf:write( '										"text": "_DEVICE_NAME_ is turned Off"\n' )
	  outf:write( '									}\n' )
	  outf:write( '								},\n' )
	  outf:write( '								{\n' )
	  outf:write( '									"On": "1",\n' )
	  outf:write( '									"HumanFriendlyText": {\n' )
	  outf:write( '										"lang_tag": "hft_device_turned_on",\n' )
	  outf:write( '										"text": "_DEVICE_NAME_ is turned On"\n' )
	  outf:write( '									}\n' )
	  outf:write( '								}\n' )
	  outf:write( '							],\n' )
	  outf:write( '							"name": "Status",\n' )
	  outf:write( '							"comparisson": "=",\n' )
	  outf:write( '							"prefix": {},\n' )
	  outf:write( '							"suffix": {}\n' )
	  outf:write( '						}\n' )
	  outf:write( '					]\n' )
	  outf:write( '				}\n' )
	  outf:write( '			],\n' )
	  outf:write( '			"DeviceType": "urn:schemas-denon-com:device:receiver:1"\n' )
	  outf:write( '		}\n' )

	outf:close()

	if (file_exists(remote_path .. template_file .. '.lzo')== true) then
		debug('Device file template ' .. remote_path .. template_file .. ' exists, decompress.')
		os.execute( 'pluto-lzo d '..remote_path .. template_file .. '.lzo' .. ' ' .. remote_path .. template_file)
	elseif (file_exists(remote_path .. template_file)== true) then
		debug('Device file template ' .. remote_path .. template_file .. ' exists, already un-compressed.')
	else
		return false
	end

	if(remote_path .. remote_file_xml ~= remote_path .. template_file) then
		if (file_exists(remote_path .. remote_file_xml  .. '.lzo') == true) then
			debug('Device file ' .. remote_path .. remote_file_xml .. ' exists, decompress.')
			os.execute( 'pluto-lzo d '..remote_path .. remote_file_xml .. '.lzo' .. ' ' .. remote_path .. remote_file_xml)
		elseif (file_exists(remote_path .. remote_file_xml) == true) then
			debug('Device file ' .. remote_path .. remote_file_xml .. ' exists, already un-compressed.')
		else
		end

		debug('Copying ' .. remote_path .. template_file .. ' to ' .. remote_path .. remote_file_xml)
		os.execute('cp ' .. remote_path .. template_file .. ' ' .. remote_path .. remote_file_xml)
	end

	local xmlfile = io.open(remote_path .. remote_file_xml, 'r')
	local str = xmlfile:read("*all")
	local newname = '<staticJson>' .. remote_file_json .. '</staticJson>'

	str = string.gsub(str, '<staticJson>(.*)</staticJson>', newname)

	xmlfile:close()
	xmlfile = io.open(remote_path .. remote_file_xml, "w+" )
	xmlfile:write(str)
	xmlfile:close()
	
	luup.attr_set("device_file",remote_file_xml, avr_dev)
	luup.attr_set("device_json",remote_file_json, avr_dev)
	
	debug('Set device file to' .. remote_file_xml .. ' for device ' .. avr_dev .. '.')


	os.execute( 'pluto-lzo c '.. remote_path .. remote_file_xml  .. ' ' .. remote_path .. remote_file_xml .. '.lzo')
	os.execute( 'pluto-lzo c '.. remote_path .. remote_file_json .. ' ' .. remote_path .. remote_file_json ..'.lzo')
	os.execute( 'pluto-lzo c '.. remote_path .. template_file    .. ' ' .. remote_path .. template_file ..   '.lzo')


	os.execute( 'rm '.. remote_path .. remote_file_json)
	os.execute( 'rm '.. remote_path .. remote_file_xml)
	os.execute( 'rm '.. remote_path .. template_file)
	

	luup.call_action("urn:micasaverde-com:serviceId:HomeAutomationGateway1", "Reload", {}, 0)

	return true

end
------------------------------------------------------------------------------------------
